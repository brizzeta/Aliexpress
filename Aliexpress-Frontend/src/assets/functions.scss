@use "sass:math";
@use "variables.scss" as *;

@function px-to-rem($px, $base: 16) {
    $rems: ();
    $count: length($px);
    @if $count == 1 { @return math.div($px, $base) * 1rem; }
    @for $i from 1 through $count { $rems: append($rems, math.div(nth($px, $i), $base) * 1rem); }
    @return $rems;
}
@mixin media-breakpoint-between($lower, $upper) {
    $min: if(type-of($lower) == 'number', $lower, map-get($breakpoints, $lower));
    $max: if(type-of($upper) == 'number', $upper, map-get($breakpoints, $upper));

    @if $min != null and $max != null {
        @media (min-width: #{$min}px) and (max-width: #{$max - 1}px) { @content; }
    } @else {
        @error "❌ Ошибка! Один из брейкпоинтов `#{$lower}` или `#{$upper}` не найден и не является числом.";
    }
}
@mixin media-breakpoint-down($breakpoint) {
    $value: if(type-of($breakpoint) == 'number', $breakpoint, map-get($breakpoints, $breakpoint));
    @if $value != null {
        @media (max-width: #{$value - 1}px) { @content; }
    } @else {
        @error "❌ Ошибка! Breakpoint `#{$breakpoint}` не найден и не является числом.";
    }
}
@mixin media-breakpoint-up($breakpoint) {
    $value: if(type-of($breakpoint) == 'number', $breakpoint, map-get($breakpoints, $breakpoint));
    @if $value != null {
        @media (min-width: #{$value}px) { @content; }
    } @else {
        @error "❌ Ошибка! Breakpoint `#{$breakpoint}` не найден и не является числом.";
    }
}